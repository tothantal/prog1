<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>int **</type> háromszögmátrix</title> EZ@@@
        <para>
           
        </para>
        <para>
            Megoldás videó:
        </para>
	<programlisting language="c">
		<![CDATA[
#include <stdio.h>
#include <stdlib.h>

int
main ()
{
    int nr = 5;
    double **tm;

    if ((tm = (double **) malloc (nr * sizeof (double *))) == NULL)
    {
        return -1;
    }

    for (int i = 0; i < nr; ++i)
    {
        if ((tm[i] = (double *) malloc ((i + 1) * sizeof (double))) == NULL)
        {
            return -1;
        }

    }

    for (int i = 0; i < nr; ++i)
        for (int j = 0; j < i + 1; ++j)
            tm[i][j] = i * (i + 1) / 2 + j;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    tm[3][0] = 42.0;
    (*(tm + 3))[1] = 43.0;	// mi van, ha itt hiányzik a külső ()
    *(tm[3] + 2) = 44.0;
    *(*(tm + 3) + 3) = 45.0;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    for (int i = 0; i < nr; ++i)
        free (tm[i]);

    free (tm);

    return 0;
	}]]>
	</programlisting>
	<para>
		A program eredményként két alsó háromszögmátrixot ír ki.
	</para>
        <para>
  		Ez a program a malloc() és a free() függvényeket felhasználva helyet foglal
		egy alsó háromszög mátrixnak a szabad tárban, majd szabaddá teszi azt a helyet.
        </para>	
        <para>
		A malloc() függvény feladata a megadott számú bájtoknak való memóriablokk lefoglalása. 
		Visszatérítési értéke egy void típusú pointer. Ebben a programban két malloc() függvény van, mindkettő egy egy 
		if függvényben. Ez azért van, hogyha az allokáció sikertelen, tehát nullpointer a visszatérési értéke,
		akkor a program befejeződjön.
        </para>	
        <para>
		A malloc() által foglalt memóriaterület magától nem fog felszabadulni, ezért ezt a program
		végén nekünk kell megtenni a free() függvénnyel.
		
        </para>            
    </section>        
    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
        <programlisting language = "c">
		
        <![CDATA[ 
        #include <stdio.h>
        #include <unistd.h>
        #include <string.h>

        #define MAX_KULCS 100
        #define BUFFER_MERET 256

        int
        main (int argc, char **argv)
        {

        char kulcs[MAX_KULCS];
        char buffer[BUFFER_MERET];

        int kulcs_index = 0;
        int olvasott_bajtok = 0;

        int kulcs_meret = strlen (argv[1]);
        strncpy (kulcs, argv[1], MAX_KULCS);

        while ((olvasott_bajtok = read (0, (void *) buffer, BUFFER_MERET)))
            {
            for (int i = 0; i < olvasott_bajtok; ++i)
	        {

	        buffer[i] = buffer[i] ^ kulcs[kulcs_index];
	        kulcs_index = (kulcs_index + 1) % kulcs_meret;

	        }

            write (1, buffer, olvasott_bajtok);

            }
        }
]]>
        </programlisting>
	<para>
		A XOR kódoló mögötti alapötlet, hogy a fájl bájtjait össze XOR-ozzuk a kulcs bájtjaival. Ekkor az eredmény egy 
		titkosított fájl, aminek az eredetijét visszakaphatjuk, ha az eredményt ismét össze XOR-ozzuk a kulccsal.
		A XOR jelentése kizáró vagy, elvégezni az ^ operátorral lehet. A XOR B eredménye csak akkor igaz, ha vagy csak 
		A, vagy csak B igaz. Minden más esetben hamis.
	</para>
	<para>
		Tehát:
	</para>
	<programlisting>
		1 ^ 1 = 0
		0 ^ 1 = 1
		1 ^ 0 = 1
		0 ^ 0 = 0
	</programlisting>
    </section>        
    <section>
        <title>Java EXOR titkosító</title> EZ@@@
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
        <programlisting language = "java">
<![CDATA[
public class ExorTitkosito {
    public ExorTitkosito(String kulcsSzoveg,
            java.io.InputStream bejovoCsatorna,
            java.io.OutputStream kimenoCsatorna)
            throws java.io.IOException {
        byte [] kulcs = kulcsSzoveg.getBytes();
        byte [] buffer = new byte[256];
        int kulcsIndex = 0;
        int olvasottBajtok = 0;
        while((olvasottBajtok = bejovoCsatorna.read(buffer)) != -1) {
            for(int i=0; i<olvasottBajtok; ++i) {
                buffer[i] = (byte)(buffer[i] ^ kulcs[kulcsIndex]);
                kulcsIndex = (kulcsIndex+1) % kulcs.length;
            }
            kimenoCsatorna.write(buffer, 0, olvasottBajtok);
        }
    }
public static void main(String[] args) {
        try {
            new ExorTitkosito(args[0], System.in, System.out);
        } catch(java.io.IOException e) {
            e.printStackTrace();
        }
    }
}
]]>
        </programlisting>
	<para>
            Ez az előző feladatnak a Java nyelven megvalósított változata.
        </para>         
	<para>
		A legnagyobb különbség, hogy mivel a C-vel ellentétben a Java egy objektum orientált nyelv, mindent osztályokba osztunk. Itt két osztályunk van. Ezek az ExorTitkosító és a main. Az ExorTitkosító osztályon belül megadunk egy ugyanolyan nevű objektumot, amely kaphat három argumentumot, a kulcsszöveget és a bemeneti illetve a kimeneti csatornát.
	</para>   
	<para>
		Mivel a Java-ban létezik külön byte típus, ezért mivel itt bájtokkal dolgozunk, itt felhasználjuk.
	</para>
	<para>
		Ezután megkezdődik a while-ba ágyazott for ciklus segítségével a kódtörés, majd a kimenő csatornára írja ki az eredményt.
	</para>
	<para>
		A main függvényen belül megadjuk, hogy az első parancssori argumentum legyen a kulcsszöveg, a bemeneti csatorna a System.in és kimeneti a System.out.
	</para>
    </section>        
    <section>
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
        <para>
            A következő program megtöri a titkosított fájlunkat.
        </para>        
        
         <programlisting language = "c">
        <![CDATA[ 
#define MAX_TITKOS 4096
#define OLVASAS_BUFFER 256
#define KULCS_MERET 8
#define _GNU_SOURCE

#include <stdio.h>
#include <unistd.h>
#include <string.h>

double
atlagos_szohossz (const char *titkos, int titkos_meret)
{
    int sz = 0;
    for (int i = 0; i < titkos_meret; ++i)
        if (titkos[i] == ' ')
            ++sz;

    return (double) titkos_meret / sz;
}

int
tiszta_lehet (const char *titkos, int titkos_meret)
{
    // a tiszta szoveg valszeg tartalmazza a gyakori magyar szavakat
    // illetve az átlagos szóhossz vizsgálatával csökkentjük a
    // potenciális töréseket

    double szohossz = atlagos_szohossz (titkos, titkos_meret);

    return szohossz > 6.0 && szohossz < 9.0
           && strcasestr (titkos, "hogy") && strcasestr (titkos, "nem")
           && strcasestr (titkos, "az") && strcasestr (titkos, "ha");

}

void
exor (const char kulcs[], int kulcs_meret, char titkos[], int titkos_meret)
{

    int kulcs_index = 0;

    for (int i = 0; i < titkos_meret; ++i)
    {

        titkos[i] = titkos[i] ^ kulcs[kulcs_index];
        kulcs_index = (kulcs_index + 1) % kulcs_meret;

    }

}

int
exor_tores (const char kulcs[], int kulcs_meret, char titkos[],
            int titkos_meret)
{

    exor (kulcs, kulcs_meret, titkos, titkos_meret);

    return tiszta_lehet (titkos, titkos_meret);

}

int
main (void)
{

    char kulcs[KULCS_MERET];
    char titkos[MAX_TITKOS];
    char *p = titkos;
    int olvasott_bajtok;

    // titkos fajt berantasa
    while ((olvasott_bajtok =
                read (0, (void *) p,
                      (p - titkos + OLVASAS_BUFFER <
                       MAX_TITKOS) ? OLVASAS_BUFFER : titkos + MAX_TITKOS - p)))
        p += olvasott_bajtok;

    // maradek hely nullazasa a titkos bufferben
    for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
        titkos[p - titkos + i] = '\0';

    // osszes kulcs eloallitasa
    for (int ii = '0'; ii <= '9'; ++ii)
        for (int ji = '0'; ji <= '9'; ++ji)
            for (int ki = '0'; ki <= '9'; ++ki)
                for (int li = '0'; li <= '9'; ++li)
                    for (int mi = '0'; mi <= '9'; ++mi)
                        for (int ni = '0'; ni <= '9'; ++ni)
                            for (int oi = '0'; oi <= '9'; ++oi)
                                for (int pi = '0'; pi <= '9'; ++pi)
                                {
                                    kulcs[0] = ii;
                                    kulcs[1] = ji;
                                    kulcs[2] = ki;
                                    kulcs[3] = li;
                                    kulcs[4] = mi;
                                    kulcs[5] = ni;
                                    kulcs[6] = oi;
                                    kulcs[7] = pi;

                                    if (exor_tores (kulcs, KULCS_MERET, titkos, p - titkos))
                                        printf
                                        ("Kulcs: [%c%c%c%c%c%c%c%c]\nTiszta szoveg: [%s]\n",
                                         ii, ji, ki, li, mi, ni, oi, pi, titkos);

                                    // ujra EXOR-ozunk, igy nem kell egy masodik buffer
                                    exor (kulcs, KULCS_MERET, titkos, p - titkos);
                                }

    return 0;
}
]]>
        </programlisting>
	   <para>
		   
	   </para>
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            R
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Koyw6IH5ScQ">https://youtu.be/Koyw6IH5ScQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R</link>               
        </para>
	<programlisting language = "R">
	<![CDATA[

#   Copyright (C) 2019  Dr. Norbert Bátfai, nbatfai@gmail.com
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# https://youtu.be/Koyw6IH5ScQ

library(neuralnet)

a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)

or.data <- data.frame(a1, a2, OR)

nn.or <- neuralnet(OR~a1+a2, or.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.or)

compute(nn.or, or.data[,1:2])


a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)
AND   <- c(0,0,0,1)

orand.data <- data.frame(a1, a2, OR, AND)

nn.orand <- neuralnet(OR+AND~a1+a2, orand.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.orand)

compute(nn.orand, orand.data[,1:2])



a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])



a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=c(6, 4, 6), linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])
	]]>
	</programlisting>
        <para>
            Egy neurális hálózat neurális "sejtekből" álló hálózat.
        </para>
	<para>
		Ezeknek a sejteknek megvan a matematikai modelljük. Minden ilyen sejtnek megvannak a bemeneti és kimeneti kapcsolatai. Egy bemeneti függvény, egy aktivációs függvény és a kimenet.
	</para>
	<para>
		A bemeneti kapcsolatokon keresztül érkező adatoknak mindnek megvan a maga súlya. 
	</para>
	<para>
		A bemeneti függvényen keresztül kiszámoljuk a beérkező adatok súlyozott átlagát.
	</para>
	<para>
		Ezután jön az aktivációs függvény, ami a súlyozott összeget egy a 0 és az 1 közé eső értékké fogja átváltani. 
	</para>  
	<para>
		majd a kimenetet továbbadja a kimeneti kapcsolatain keresztül, amelyek további "sejtekhez" vannak kapcsolódva.
	</para>    
	<para>
		A program maga három részből áll. Ezek sorban az OR (vagy), OR és mellé AND (és), és az XOR (kizáró vagy) logikai kapukat írják le.
	</para>
	<para>
		A program először betölti a neuralnet nevű könyvtárat, majd például az OR esetén feltölti az a1(0,1,0,1) és a2(0,0,1,1,) változókat, illetve megadjuk, hogy ezekre az értékekre milyen hatással lenne az OR művelet elvégzése. A műveletet fentről lefelé végezzük el. Tehát 0 OR 0, 1 OR 0, 0 OR 1 és 1 OR 1. Így megkapjuk az OR(0,1,1,1) változót. Ezzel megadjuk a hálónak a szabályokat és ezután elkezdi tanítani magát, kiszámolja magának a súlyokat. 
	</para>
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title> EZ@@@ MNIST extra
        <para>
            C++
        </para>
        <para>
            Megoldás videó:
        </para>
        <programlisting language = "c">

		
<![CDATA[ 
		
class Perceptron
{
public:
  Perceptron ( int nof, ... )
  {
    n_layers = nof;

    units = new double*[n_layers];
    n_units = new int[n_layers];

    va_list vap;

    va_start ( vap, nof );

    for ( int i {0}; i < n_layers; ++i )
      {
        n_units[i] = va_arg ( vap, int );

        if ( i )
          units[i] = new double [n_units[i]];
      }

    va_end ( vap );

    weights = new double**[n_layers-1];

#ifndef RND_DEBUG
    std::random_device init;
    std::default_random_engine gen {init() };
#else
    std::default_random_engine gen;
#endif

    std::uniform_real_distribution<double> dist ( -1.0, 1.0 );

    for ( int i {1}; i < n_layers; ++i )
      {
        weights[i-1] = new double *[n_units[i]];

        for ( int j {0}; j < n_units[i]; ++j )
          {
            weights[i-1][j] = new double [n_units[i-1]];

            for ( int k {0}; k < n_units[i-1]; ++k )
              {
                weights[i-1][j][k] = dist ( gen );
              }
          }
      }
  }

  Perceptron ( std::fstream & file )
  {
    file >> n_layers;

    units = new double*[n_layers];
    n_units = new int[n_layers];

    for ( int i {0}; i < n_layers; ++i )
      {
        file >> n_units[i];

        if ( i )
          units[i] = new double [n_units[i]];
      }

    weights = new double**[n_layers-1];

    for ( int i {1}; i < n_layers; ++i )
      {
        weights[i-1] = new double *[n_units[i]];

        for ( int j {0}; j < n_units[i]; ++j )
          {
            weights[i-1][j] = new double [n_units[i-1]];

            for ( int k {0}; k < n_units[i-1]; ++k )
              {
                file >> weights[i-1][j][k];
              }
          }
      }
  }


  double sigmoid ( double x )
  {
    return 1.0/ ( 1.0 + exp ( -x ) );
  }


  double operator() ( double image [] )
  {

    units[0] = image;

    for ( int i {1}; i < n_layers; ++i )
      {

#ifdef CUDA_PRCPS

        cuda_layer ( i, n_units, units, weights );

#else

        #pragma omp parallel for
        for ( int j = 0; j < n_units[i]; ++j )
          {
            units[i][j] = 0.0;

            for ( int k = 0; k < n_units[i-1]; ++k )
              {
                units[i][j] += weights[i-1][j][k] * units[i-1][k];
              }

            units[i][j] = sigmoid ( units[i][j] );

          }

#endif

      }

    return sigmoid ( units[n_layers - 1][0] );

  }

  void learning ( double image [], double q, double prev_q )
  {
    double y[1] {q};

    learning ( image, y );
  }

  void learning ( double image [], double y[] )
  {
    //( *this ) ( image );

    units[0] = image;

    double ** backs = new double*[n_layers-1];

    for ( int i {0}; i < n_layers-1; ++i )
      {
        backs[i] = new double [n_units[i+1]];
      }

    int i {n_layers-1};

    for ( int j {0}; j < n_units[i]; ++j )
      {
        backs[i-1][j] = sigmoid ( units[i][j] ) * ( 1.0-sigmoid ( units[i][j] ) ) * ( y[j] - units[i][j] );

        for ( int k {0}; k < n_units[i-1]; ++k )
          {
            weights[i-1][j][k] += ( 0.2* backs[i-1][j] *units[i-1][k] );
          }

      }

    for ( int i {n_layers-2}; i >0 ; --i )
      {

        #pragma omp parallel for
        for ( int j =0; j < n_units[i]; ++j )
          {

            double sum = 0.0;

            for ( int l = 0; l < n_units[i+1]; ++l )
              {
                sum += 0.19*weights[i][l][j]*backs[i][l];
              }

            backs[i-1][j] = sigmoid ( units[i][j] ) * ( 1.0-sigmoid ( units[i][j] ) ) * sum;

            for ( int k = 0; k < n_units[i-1]; ++k )
              {
                weights[i-1][j][k] += ( 0.19* backs[i-1][j] *units[i-1][k] );
              }
          }
      }

    for ( int i {0}; i < n_layers-1; ++i )
      {
        delete [] backs[i];
      }

    delete [] backs;

  }

  ~Perceptron()
  {
    for ( int i {1}; i < n_layers; ++i )
      {
        for ( int j {0}; j < n_units[i]; ++j )
          {
            delete [] weights[i-1][j];
          }

        delete [] weights[i-1];
      }

    delete [] weights;

    for ( int i {0}; i < n_layers; ++i )
      {
        if ( i )
          delete [] units[i];
      }

    delete [] units;
    delete [] n_units;

  }

  void save ( std::fstream & out )
  {
    out << " "
        << n_layers;

    for ( int i {0}; i < n_layers; ++i )
      out << " " << n_units[i];

    for ( int i {1}; i < n_layers; ++i )
      {
        for ( int j {0}; j < n_units[i]; ++j )
          {
            for ( int k {0}; k < n_units[i-1]; ++k )
              {
                out << " "
                    << weights[i-1][j][k];

              }
          }
      }

  }

private:
  Perceptron ( const Perceptron & );
  Perceptron & operator= ( const Perceptron & );

  int n_layers;
  int* n_units;
  double **units;
  double ***weights;

};	
					 
]]>		

        </programlisting>
        <para>
           	A fenti osztály egy hiba-visszaterjesztéses perceptron definíciója.
		Az így definiált perceptronnak helyet foglalhatunk úgy, hogy 
		Perceptron* p = new Perceptron(int layer, int neuron1, int neuron2, ..., int neuronN)
		Ahol a layer a rétegek számát jelöli és az azutáni egész számok pedig az egyes rétegekhez rendelt neuronok számát.
        </para>            
    </section>        
        

</chapter>                
