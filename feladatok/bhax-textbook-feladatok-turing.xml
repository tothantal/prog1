<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalĂŠkban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para> 
            A következő program egy magot 100 százalékban dolgoztat meg:
        </para>
        
        <programlisting language = "c"> 
                <![CDATA[ 
            #include <stdio.h>

            int main()
            {
                while(1){};
            }
]]>
        </programlisting>>
            
        <para>
             Ez a program egy egyszerű while ciklus, aminek ha a feltétele teljesül, akkor nem csinál
            semmit. Ebben az esetben a feltétel 1, ami 'igaz' vagy angolul 'true' boolean típusú
            értékkel bír, tehát az adott ciklus egy végtelen ciklus, azaz sosem áll le, kivéve ha arra kényszerítjük a CTRL+C 
            betűkombinációval, hiszen az 'igaz' értéke mindig igaz.
        </para>>
         
        <para>
            A következő program minden magot 100 százalékban dolgoztat meg:
        </para>
        <programlisting language = "c"> 
                <![CDATA[] 
        // compile: gcc name.c -fopenmp

        #include <stdio.h>

        int main()
        {
            #pragma omp parallel
            while(1){};
        }
]]>
        </programlisting>>
        
        <para>
            Ez az előző program módosítása. Ugyanabból a while ciklusból áll némi változtatással.
            A #pragma feladata, hogy a gép vagy az operációs rendszerre vonatkozó specifikus utasítást
            adjon a compilernek, azaz megmondja hogy a compiler tegyen valamit vagy felülírjon valamilyen
            általánosnak vett utasítást. Itt a #pragma szerepe a felülírás. Normális esetben, mint azt felül is láthattuk,
            ez a program #pragma nélkül csak 1 processzort dolgoztat meg 100 százalékon, de az omp parallel utsítás
            azt mondja a compilernek, hogy egyszerre több szálon fusson a program, azaz több processzor dolgozzon rajta egy időben, aminek 
            az eredménye, hogy ez a program az összes processzort 100 százalékosan megdolgoztatja.
        </para>
        
        <para>
            A következő program 0 százalékon dolgoztat meg egy magot:
        </para>
            
            <programlisting language = "c"> 
                <![CDATA[] 
            #include <stdio.h>
            #include <unistd.h>

            int main()
            {
                while(1)
                {
                    usleep(1000);
                }
            }
]]>
        </programlisting>>
        
        <para>
            Ez a program a while ciklusban a usleep(1000) utasítást végzi el. A usleep(seconds_t usec)
            az unistd.h fájlban definiált függvény. Adott usec mennyiségű mikroszekundumig megszakítja 
            a program működését.
        </para>      
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot Írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldáás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőeges programról el tudja dönteni, hogy van-e benne végtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudokódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épülő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
          	A megoldási probléma lényege hogy nem tudunk olyan programot írni, amely eldönti egy másik programról,
		hogy az lefagy-e vagy sem. Ahhoz hogy a T100 eldöntse, hogy egy program lefagy-e vagy sem,
		elősször le kell futtatnia azt és megvizsgálni a következményeket. Ha a prgoram lefutott, a T100 kiírja hogy
		a programunk lefutott, de ha a program lefagy, akkor a T100 is le fog fagyni, mert a döntés előtt
		le kell futtatnia azt. 
		
		Ha a fenti T1000 programot önmagára futtatjuk, akkor két eshetőség adódik: Ha a programunk 
		nem fagy le, akkor bekövetkezik a végtelen ciklus a T1000-ben és így lefagy. Ha pedig lefagy a programunk, akkor
		mivel a program lefagy ezért a T1000 is lefagy.
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változĂł értékét, bármifĂŠle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <programlisting language="c" >
        <![CDATA[
        #include <stdio.h>

        int main()
        {
            int a = 10;
            int b = 4;
            printf("a = %d\n", a);
            printf("b = %d\n", b);

            a = a - b;  a = 10 - 4 / 6
            b = a + b;  b = 6 + 4 / 10
            a = b - a;  a = 10 - 6 / 4

            printf("a = %d\n", a);
            printf("b = %d\n", b);
        }
        ]]>
        </programlisting>
        <para>
            A fenti C program kiírja két változó értékét, felcseréli őket, majd kiírja a változók
            új értékeit. Az int a = 10 és int b = 4 megadják a és b értékeit. 
	
	    Először a-t egyenlővé tesszük a - b -vel (itt így a = 10 - 4 = 6). Majd b-t egyenlővé tesszük a + b -vel, 
	    de mivel a = a - b, ezért b = a + b = a - b + b = a (b = 10 - 4 + 4 = 10). Ekkor a-t egyenlővé tesszük b - a -val.
	    Itt b = a és a = a - b -ként van definiálva, tehát a = b - a = a - (a - b) = a - a + b = b ( a = 6 + 4 - (10 - 4) = 4)
		
	    A printf() függvény
            kiírja a paraméteréül kapott stringet. Például a fent látható printf("a = %d\n", a)
            azt fogja kiírni hogy a = 10, majd egy új sort kezd. Ebből "a = %d\n" a string rész, amiben a
            %d egy format specifier. Feladata, hogy megmondja, a %d helyére
            egy decimális egész szám (itt: a) fog kerülni, amit a string rész utáni vesszővel elválasztott 
            helyre kell írni. Ugyanitt a \n egy escape sequence, ami azt mondja a 
            printf függvénynek, hogy a \n helyére egy új sort írjon.
        </para>
        <para>
            Ezek után megkezdődik a változók felcserélése a fenti műveletek segítségével. Miután az kész,
            a program ismét kiírja a változók immár új felcserélt értékeit.
        </para>>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            használata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            MegoldĂĄs videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Labdapattogtatás if nélkül: 
        </para>
        
        <programlisting language = "C">
        <![CDATA[
        #include <stdio.h>
        #include <math.h>

        int write_x(x,y)
        {
            int xi,yi;

            for(xi=0;xi<x;xi++)
            {
                printf("\n");
            }

            for(yi=0;yi<y;yi++)
            {
                printf(" ");
            }
            printf("X\n");
            return 0;
        }

        int main()
        {

            int width = 90;
            int height = 25;
            long int x=0,y=0;

            while(1)
            {
                system("cls");
                write_x(abs(height - (x++ % (height * 2 ))), abs(width - (y++ % (width*2))));
                usleep(10);
            }

            return 0;
        }
        ]]>
        </programlisting>
        <para>
            A program Windows alatt egy adott 'pályán' pattogtat egy x-el jelölt 'labdát' a konzolon.
            Két függvényből áll, a már megszokott int main() és egy 
            int write_x(x,y) függvényből. A main függvényben meg van adva a pálya hossza, magassága
            és a labda koordinátái, amelyek alapesetben nullával egyenlőek. Ezek után a program egy 
            végtelen ciklusban először törli a képernyőt a system("cls") függvénnyel, majd meghívja a write_x() függvényt két abszolút értékre.
            Egy szám abszolút értékét az abs() függvénnyel számoljuk ki, ami a math.h fájlban van meghatározva.
            Ha a write_x() lefutott, akkor egy ideig megszűnik a munkavégzés és előről kezdődnek a ciklusban definiált lépések.
        </para>
        <para>
            Az int write_x(x,y) itt egy a felhasználó által megadott függvény. Az előtte lévő int szó azt jelenti, hogy
            a függvény egy integer, azaz egész szám típusú értéket fog visszaadni, amit a return 0 paranccsal teszünk meg 
           (return 0 azt jelenti, hogy a program probléma nélkül lefutott. Ha nem nullát ad vissza, akkor futás közben hiba történt.).
            A zárójelek közötti x és y számok a függvény paraméterei, tehát ezekkel fog dolgozni. A számokat függvényhívásnál
            kell megadni. A függvényen belül két for ciklus található. Az első feladata, hogy a labda függőleges helyzetének
            megfelelő új sort írjon ki, a másodiké pedig, hogy úgyanúgy a labda vízszintes pozíciójának megfelelő szóközt írasson ki.
            Ha ez megtörtént, akkor a labda jelenlegi koordinájáihoz érkezett a kurzor. A for ciklusok befejeződnek és printf()-el
            kiíratunk egy X-et.
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>
        </para>
        <programlisting language = "c">
		<![CDATA[
            // BHAX BogoMIPS
// Copyright (C) 2019
// Norbert Batfai, batfai.norbert@inf.unideb.hu
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Version history
//
// This program is based on 
// 
// - Linus Torvalds's original code (https://mirrors.edge.kernel.org/pub/linux/kernel/v1.0/linux-1.0.tar.gz init/main.c)
// - and Jeff Tranter's standalone version (archive.debian.org/debian/pool/main/s/sysutils/sysutils_1.3.8.5.1.tar.gz). 
//
// See also UDPROG
//

#include <time.h>
#include <stdio.h>

void
delay (unsigned long long loops)
{
  for (unsigned long long i = 0; i < loops; i++);
}

int
main (void)
{
  unsigned long long loops_per_sec = 1;
  unsigned long long ticks;

  printf ("Calibrating delay loop..");
  fflush (stdout);

  while ((loops_per_sec <<= 1))
    {
      ticks = clock ();
      delay (loops_per_sec);
      ticks = clock () - ticks;

      if (ticks >= CLOCKS_PER_SEC)
	{
	  loops_per_sec = (loops_per_sec / ticks) * CLOCKS_PER_SEC;

	  printf ("ok - %llu.%02llu BogoMIPS\n", loops_per_sec / 500000,
		  (loops_per_sec / 5000) % 100);

	  return 0;
	}
    }

  printf ("failed\n");
  return -1;
}

		]]>
        </programlisting>
	    
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <programlisting language = "c">
		<![CDATA[
#include <stdio.h>
#include <math.h>
#include <stdlib.h>

void kiir (double tomb[], int db);
double tavolsag(double pagerank[], double pagerank_temp[], int db);

int main(void)
{
	double L[4][4] =
  	{
		{0.0, 0.0, 1.0 / 3.0, 0.0},
		{1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0},
		{0.0, 1.0 / 2.0, 0.0, 0.0},
		{0.0, 0.0, 1.0 / 3.0, 0.0}
	};

	double PR[4] = {0.0, 0.0, 0.0, 0.0};
	double PRv[4] = {1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0};

	for (;;)
	{
		for(int i=0; i<4; i++)
    		{
			PR[i] = PRv[i];
		}

		for (int i=0; i<4; i++)
    		{
			double temp = 0.0;

			for (int j=0; j<4; j++)
      			{
				temp += L[i][j] * PR[j];
				PRv[i] = temp;
			}
		}

		if(tavolsag(PR, PRv, 4) < 0.000001)
    		{
			break;
		}

	kiir(PR, 4);

	return 0;
}

void kiir (double tomb[], int db)
{
	for (int i=0; i<db; i++)
	{
		printf("PageRank [%d]: %lf\n", i, tomb[i]);
	}
}

double tavolsag(double pagerank[], double pagerank_temp[], int db)
{
	double dist = 0.0;

	for(int i=0; i<db; i++)
	{
		dist += (pagerank[i] - pagerank_temp[i]) * (pagerank[i] - pagerank_temp[i]);
	}

	return sqrt(dist);
}
]]>
        </programlisting>
        <para>
            Ez a program egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét.
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
	<programlisting language = "R">
<![CDATA[

#   Copyright (C) 2019  Dr. Norbert Bátfai, nbatfai@gmail.com
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>

library(matlab)

stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")
       
]]>
	</programlisting>
	<para>
	A Brun tétel szerint az ikerprímek reciprokösszege egy Brun-konstans nevű értékhez konvergál.
		
	Az ikerprímek olyan prímpárok, melyek különbsége 2. Egy prímpár pedig egy olyan prím, ami egy másik
	prímtől 2-nél nagyobb, vagy kisebb. Példaképp az 1 és a 3 számok.
	Ekkor 1/1 + 1/3 = 1.333 . A Brun-konstans megközelítő értéke 1,90216 .
		
	Itt a program első felében a primes(x) függvényt definiáljuk, ami egyrészt kiírja x-ig a prímszámokat, másrészt
	kiszámolja az ikerprímek reciprokösszegeit. Azután a második részben kiplottolhatjuk a függvény által
	kiszámolt eredményeket.
	
	Viggo Brun, norvég matematikus bizonyította be a tételt 1919-ben.
		
	
	</para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <programlisting language = "R">
<![CDATA[

#   An illustration written in R for the Monty Hall Problem 
#   Copyright (C) 2019  Dr. Norbert Bátfai, nbatfai@gmail.com
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>
#
#   https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan
# 

kiserletek_szama=10000000
kiserlet = sample(1:3, kiserletek_szama, replace=T)
jatekos = sample(1:3, kiserletek_szama, replace=T)
musorvezeto=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    if(kiserlet[i]==jatekos[i]){
    
        mibol=setdiff(c(1,2,3), kiserlet[i])
    
    }else{
    
        mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
    
    }

    musorvezeto[i] = mibol[sample(1:length(mibol),1)]

}

nemvaltoztatesnyer= which(kiserlet==jatekos)
valtoztat=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
    valtoztat[i] = holvalt[sample(1:length(holvalt),1)]
    
}

valtoztatesnyer = which(kiserlet==valtoztat)


sprintf("Kiserletek szama: %i", kiserletek_szama)
length(nemvaltoztatesnyer)
length(valtoztatesnyer)
length(nemvaltoztatesnyer)/length(valtoztatesnyer)
length(nemvaltoztatesnyer)+length(valtoztatesnyer)


]]>
        </programlisting>
	<para>
		A Monty Hall probléma keretében arról van szó, hogy adott három lehetőség (doboz, ajtó stb.), 
		ebből egy nyerő és kettő nem. Nekünk a feladatunk hogy ezekből válasszunk egyet. 
		Ilyenkor az esély hogy a nyerő dobozt választjuk egy a háromból. Választásunk után egy második fél kinyit a
		maradék két dobozból egy olyat, ami biztosan nem nyerő, majd felteszi nekünk a kérdést, hogy maradunk-e az
		előző döntésünknél, vagy változtatunk rajta. Ekkor a helyes válasz az, hogy változtassunk, ugyanis így 
		2/3 esélyünk van ara, hogy jó dobozt választunk szemben az előző 1/3-al.
	
	</para>
    </section>

</chapter>                
